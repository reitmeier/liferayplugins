package at.mailbox.sync.service.base;

import at.mailbox.sync.model.Task;
import at.mailbox.sync.service.TaskService;
import at.mailbox.sync.service.persistence.MailboxPersistence;
import at.mailbox.sync.service.persistence.TaskPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the task remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link at.mailbox.sync.service.impl.TaskServiceImpl}.
 * </p>
 *
 * @author Claus Reitmeier
 * @see at.mailbox.sync.service.impl.TaskServiceImpl
 * @see at.mailbox.sync.service.TaskServiceUtil
 * @generated
 */
public abstract class TaskServiceBaseImpl extends BaseServiceImpl
    implements TaskService, IdentifiableBean {
    @BeanReference(type = at.mailbox.sync.service.MailboxLocalService.class)
    protected at.mailbox.sync.service.MailboxLocalService mailboxLocalService;
    @BeanReference(type = at.mailbox.sync.service.MailboxService.class)
    protected at.mailbox.sync.service.MailboxService mailboxService;
    @BeanReference(type = MailboxPersistence.class)
    protected MailboxPersistence mailboxPersistence;
    @BeanReference(type = at.mailbox.sync.service.TaskLocalService.class)
    protected at.mailbox.sync.service.TaskLocalService taskLocalService;
    @BeanReference(type = at.mailbox.sync.service.TaskService.class)
    protected at.mailbox.sync.service.TaskService taskService;
    @BeanReference(type = TaskPersistence.class)
    protected TaskPersistence taskPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private TaskServiceClpInvoker _clpInvoker = new TaskServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link at.mailbox.sync.service.TaskServiceUtil} to access the task remote service.
     */

    /**
     * Returns the mailbox local service.
     *
     * @return the mailbox local service
     */
    public at.mailbox.sync.service.MailboxLocalService getMailboxLocalService() {
        return mailboxLocalService;
    }

    /**
     * Sets the mailbox local service.
     *
     * @param mailboxLocalService the mailbox local service
     */
    public void setMailboxLocalService(
        at.mailbox.sync.service.MailboxLocalService mailboxLocalService) {
        this.mailboxLocalService = mailboxLocalService;
    }

    /**
     * Returns the mailbox remote service.
     *
     * @return the mailbox remote service
     */
    public at.mailbox.sync.service.MailboxService getMailboxService() {
        return mailboxService;
    }

    /**
     * Sets the mailbox remote service.
     *
     * @param mailboxService the mailbox remote service
     */
    public void setMailboxService(
        at.mailbox.sync.service.MailboxService mailboxService) {
        this.mailboxService = mailboxService;
    }

    /**
     * Returns the mailbox persistence.
     *
     * @return the mailbox persistence
     */
    public MailboxPersistence getMailboxPersistence() {
        return mailboxPersistence;
    }

    /**
     * Sets the mailbox persistence.
     *
     * @param mailboxPersistence the mailbox persistence
     */
    public void setMailboxPersistence(MailboxPersistence mailboxPersistence) {
        this.mailboxPersistence = mailboxPersistence;
    }

    /**
     * Returns the task local service.
     *
     * @return the task local service
     */
    public at.mailbox.sync.service.TaskLocalService getTaskLocalService() {
        return taskLocalService;
    }

    /**
     * Sets the task local service.
     *
     * @param taskLocalService the task local service
     */
    public void setTaskLocalService(
        at.mailbox.sync.service.TaskLocalService taskLocalService) {
        this.taskLocalService = taskLocalService;
    }

    /**
     * Returns the task remote service.
     *
     * @return the task remote service
     */
    public at.mailbox.sync.service.TaskService getTaskService() {
        return taskService;
    }

    /**
     * Sets the task remote service.
     *
     * @param taskService the task remote service
     */
    public void setTaskService(at.mailbox.sync.service.TaskService taskService) {
        this.taskService = taskService;
    }

    /**
     * Returns the task persistence.
     *
     * @return the task persistence
     */
    public TaskPersistence getTaskPersistence() {
        return taskPersistence;
    }

    /**
     * Sets the task persistence.
     *
     * @param taskPersistence the task persistence
     */
    public void setTaskPersistence(TaskPersistence taskPersistence) {
        this.taskPersistence = taskPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();
    }

    public void destroy() {
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Task.class;
    }

    protected String getModelClassName() {
        return Task.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = taskPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
