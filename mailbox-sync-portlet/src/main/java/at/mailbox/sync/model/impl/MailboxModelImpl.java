package at.mailbox.sync.model.impl;

import at.mailbox.sync.model.Mailbox;
import at.mailbox.sync.model.MailboxModel;
import at.mailbox.sync.model.MailboxSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Mailbox service. Represents a row in the &quot;MailboxSync_Mailbox&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.mailbox.sync.model.MailboxModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MailboxImpl}.
 * </p>
 *
 * @author Claus Reitmeier
 * @see MailboxImpl
 * @see at.mailbox.sync.model.Mailbox
 * @see at.mailbox.sync.model.MailboxModel
 * @generated
 */
@JSON(strict = true)
public class MailboxModelImpl extends BaseModelImpl<Mailbox>
    implements MailboxModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a mailbox model instance should use the {@link at.mailbox.sync.model.Mailbox} interface instead.
     */
    public static final String TABLE_NAME = "MailboxSync_Mailbox";
    public static final Object[][] TABLE_COLUMNS = {
            { "mailboxId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "description", Types.VARCHAR },
            { "host", Types.VARCHAR },
            { "port", Types.INTEGER },
            { "mailboxUser", Types.VARCHAR },
            { "mailboxUserSecret", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table MailboxSync_Mailbox (mailboxId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,description VARCHAR(75) null,host VARCHAR(75) null,port INTEGER,mailboxUser VARCHAR(75) null,mailboxUserSecret VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table MailboxSync_Mailbox";
    public static final String ORDER_BY_JPQL = " ORDER BY mailbox.mailboxId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY MailboxSync_Mailbox.mailboxId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.at.mailbox.sync.model.Mailbox"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.at.mailbox.sync.model.Mailbox"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.at.mailbox.sync.model.Mailbox"),
            true);
    public static long GROUPID_COLUMN_BITMASK = 1L;
    public static long MAILBOXID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.at.mailbox.sync.model.Mailbox"));
    private static ClassLoader _classLoader = Mailbox.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Mailbox.class
        };
    private long _mailboxId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _description;
    private String _host;
    private int _port;
    private String _mailboxUser;
    private String _mailboxUserSecret;
    private long _columnBitmask;
    private Mailbox _escapedModel;

    public MailboxModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Mailbox toModel(MailboxSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Mailbox model = new MailboxImpl();

        model.setMailboxId(soapModel.getMailboxId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setDescription(soapModel.getDescription());
        model.setHost(soapModel.getHost());
        model.setPort(soapModel.getPort());
        model.setMailboxUser(soapModel.getMailboxUser());
        model.setMailboxUserSecret(soapModel.getMailboxUserSecret());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Mailbox> toModels(MailboxSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Mailbox> models = new ArrayList<Mailbox>(soapModels.length);

        for (MailboxSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _mailboxId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setMailboxId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _mailboxId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Mailbox.class;
    }

    @Override
    public String getModelClassName() {
        return Mailbox.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("mailboxId", getMailboxId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("description", getDescription());
        attributes.put("host", getHost());
        attributes.put("port", getPort());
        attributes.put("mailboxUser", getMailboxUser());
        attributes.put("mailboxUserSecret", getMailboxUserSecret());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long mailboxId = (Long) attributes.get("mailboxId");

        if (mailboxId != null) {
            setMailboxId(mailboxId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String host = (String) attributes.get("host");

        if (host != null) {
            setHost(host);
        }

        Integer port = (Integer) attributes.get("port");

        if (port != null) {
            setPort(port);
        }

        String mailboxUser = (String) attributes.get("mailboxUser");

        if (mailboxUser != null) {
            setMailboxUser(mailboxUser);
        }

        String mailboxUserSecret = (String) attributes.get("mailboxUserSecret");

        if (mailboxUserSecret != null) {
            setMailboxUserSecret(mailboxUserSecret);
        }
    }

    @JSON
    @Override
    public long getMailboxId() {
        return _mailboxId;
    }

    @Override
    public void setMailboxId(long mailboxId) {
        _mailboxId = mailboxId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public String getHost() {
        if (_host == null) {
            return StringPool.BLANK;
        } else {
            return _host;
        }
    }

    @Override
    public void setHost(String host) {
        _host = host;
    }

    @JSON
    @Override
    public int getPort() {
        return _port;
    }

    @Override
    public void setPort(int port) {
        _port = port;
    }

    @JSON
    @Override
    public String getMailboxUser() {
        if (_mailboxUser == null) {
            return StringPool.BLANK;
        } else {
            return _mailboxUser;
        }
    }

    @Override
    public void setMailboxUser(String mailboxUser) {
        _mailboxUser = mailboxUser;
    }

    @JSON
    @Override
    public String getMailboxUserSecret() {
        if (_mailboxUserSecret == null) {
            return StringPool.BLANK;
        } else {
            return _mailboxUserSecret;
        }
    }

    @Override
    public void setMailboxUserSecret(String mailboxUserSecret) {
        _mailboxUserSecret = mailboxUserSecret;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Mailbox.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Mailbox toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Mailbox) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        MailboxImpl mailboxImpl = new MailboxImpl();

        mailboxImpl.setMailboxId(getMailboxId());
        mailboxImpl.setGroupId(getGroupId());
        mailboxImpl.setCompanyId(getCompanyId());
        mailboxImpl.setUserId(getUserId());
        mailboxImpl.setUserName(getUserName());
        mailboxImpl.setCreateDate(getCreateDate());
        mailboxImpl.setModifiedDate(getModifiedDate());
        mailboxImpl.setDescription(getDescription());
        mailboxImpl.setHost(getHost());
        mailboxImpl.setPort(getPort());
        mailboxImpl.setMailboxUser(getMailboxUser());
        mailboxImpl.setMailboxUserSecret(getMailboxUserSecret());

        mailboxImpl.resetOriginalValues();

        return mailboxImpl;
    }

    @Override
    public int compareTo(Mailbox mailbox) {
        long primaryKey = mailbox.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Mailbox)) {
            return false;
        }

        Mailbox mailbox = (Mailbox) obj;

        long primaryKey = mailbox.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        MailboxModelImpl mailboxModelImpl = this;

        mailboxModelImpl._originalGroupId = mailboxModelImpl._groupId;

        mailboxModelImpl._setOriginalGroupId = false;

        mailboxModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Mailbox> toCacheModel() {
        MailboxCacheModel mailboxCacheModel = new MailboxCacheModel();

        mailboxCacheModel.mailboxId = getMailboxId();

        mailboxCacheModel.groupId = getGroupId();

        mailboxCacheModel.companyId = getCompanyId();

        mailboxCacheModel.userId = getUserId();

        mailboxCacheModel.userName = getUserName();

        String userName = mailboxCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            mailboxCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            mailboxCacheModel.createDate = createDate.getTime();
        } else {
            mailboxCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            mailboxCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            mailboxCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        mailboxCacheModel.description = getDescription();

        String description = mailboxCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            mailboxCacheModel.description = null;
        }

        mailboxCacheModel.host = getHost();

        String host = mailboxCacheModel.host;

        if ((host != null) && (host.length() == 0)) {
            mailboxCacheModel.host = null;
        }

        mailboxCacheModel.port = getPort();

        mailboxCacheModel.mailboxUser = getMailboxUser();

        String mailboxUser = mailboxCacheModel.mailboxUser;

        if ((mailboxUser != null) && (mailboxUser.length() == 0)) {
            mailboxCacheModel.mailboxUser = null;
        }

        mailboxCacheModel.mailboxUserSecret = getMailboxUserSecret();

        String mailboxUserSecret = mailboxCacheModel.mailboxUserSecret;

        if ((mailboxUserSecret != null) && (mailboxUserSecret.length() == 0)) {
            mailboxCacheModel.mailboxUserSecret = null;
        }

        return mailboxCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{mailboxId=");
        sb.append(getMailboxId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", host=");
        sb.append(getHost());
        sb.append(", port=");
        sb.append(getPort());
        sb.append(", mailboxUser=");
        sb.append(getMailboxUser());
        sb.append(", mailboxUserSecret=");
        sb.append(getMailboxUserSecret());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("at.mailbox.sync.model.Mailbox");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>mailboxId</column-name><column-value><![CDATA[");
        sb.append(getMailboxId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>host</column-name><column-value><![CDATA[");
        sb.append(getHost());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>port</column-name><column-value><![CDATA[");
        sb.append(getPort());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mailboxUser</column-name><column-value><![CDATA[");
        sb.append(getMailboxUser());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mailboxUserSecret</column-name><column-value><![CDATA[");
        sb.append(getMailboxUserSecret());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
