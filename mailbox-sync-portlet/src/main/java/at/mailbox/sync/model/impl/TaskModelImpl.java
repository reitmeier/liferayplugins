package at.mailbox.sync.model.impl;

import at.mailbox.sync.model.Task;
import at.mailbox.sync.model.TaskModel;
import at.mailbox.sync.model.TaskSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Task service. Represents a row in the &quot;MailboxSync_Task&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.mailbox.sync.model.TaskModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TaskImpl}.
 * </p>
 *
 * @author Claus Reitmeier
 * @see TaskImpl
 * @see at.mailbox.sync.model.Task
 * @see at.mailbox.sync.model.TaskModel
 * @generated
 */
@JSON(strict = true)
public class TaskModelImpl extends BaseModelImpl<Task> implements TaskModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a task model instance should use the {@link at.mailbox.sync.model.Task} interface instead.
     */
    public static final String TABLE_NAME = "MailboxSync_Task";
    public static final Object[][] TABLE_COLUMNS = {
            { "taskId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "status", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "mailboxId", Types.BIGINT },
            { "permissionUserGroupId", Types.BIGINT },
            { "eventCalendarId", Types.BIGINT },
            { "documentFolderId", Types.BIGINT },
            { "webcontentFolderId", Types.BIGINT },
            { "vocabularyId", Types.BIGINT },
            { "period", Types.BIGINT },
            { "clamavServerIP", Types.VARCHAR },
            { "clamavPort", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table MailboxSync_Task (taskId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status VARCHAR(75) null,description VARCHAR(75) null,mailboxId LONG,permissionUserGroupId LONG,eventCalendarId LONG,documentFolderId LONG,webcontentFolderId LONG,vocabularyId LONG,period LONG,clamavServerIP VARCHAR(75) null,clamavPort INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table MailboxSync_Task";
    public static final String ORDER_BY_JPQL = " ORDER BY task.taskId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY MailboxSync_Task.taskId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.at.mailbox.sync.model.Task"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.at.mailbox.sync.model.Task"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.at.mailbox.sync.model.Task"),
            true);
    public static long MAILBOXID_COLUMN_BITMASK = 1L;
    public static long STATUS_COLUMN_BITMASK = 2L;
    public static long TASKID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.at.mailbox.sync.model.Task"));
    private static ClassLoader _classLoader = Task.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Task.class };
    private long _taskId;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _status;
    private String _originalStatus;
    private String _description;
    private long _mailboxId;
    private long _originalMailboxId;
    private boolean _setOriginalMailboxId;
    private long _permissionUserGroupId;
    private long _eventCalendarId;
    private long _documentFolderId;
    private long _webcontentFolderId;
    private long _vocabularyId;
    private long _period;
    private String _clamavServerIP;
    private int _clamavPort;
    private long _columnBitmask;
    private Task _escapedModel;

    public TaskModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Task toModel(TaskSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Task model = new TaskImpl();

        model.setTaskId(soapModel.getTaskId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setStatus(soapModel.getStatus());
        model.setDescription(soapModel.getDescription());
        model.setMailboxId(soapModel.getMailboxId());
        model.setPermissionUserGroupId(soapModel.getPermissionUserGroupId());
        model.setEventCalendarId(soapModel.getEventCalendarId());
        model.setDocumentFolderId(soapModel.getDocumentFolderId());
        model.setWebcontentFolderId(soapModel.getWebcontentFolderId());
        model.setVocabularyId(soapModel.getVocabularyId());
        model.setPeriod(soapModel.getPeriod());
        model.setClamavServerIP(soapModel.getClamavServerIP());
        model.setClamavPort(soapModel.getClamavPort());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Task> toModels(TaskSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Task> models = new ArrayList<Task>(soapModels.length);

        for (TaskSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _taskId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setTaskId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _taskId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Task.class;
    }

    @Override
    public String getModelClassName() {
        return Task.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("taskId", getTaskId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("status", getStatus());
        attributes.put("description", getDescription());
        attributes.put("mailboxId", getMailboxId());
        attributes.put("permissionUserGroupId", getPermissionUserGroupId());
        attributes.put("eventCalendarId", getEventCalendarId());
        attributes.put("documentFolderId", getDocumentFolderId());
        attributes.put("webcontentFolderId", getWebcontentFolderId());
        attributes.put("vocabularyId", getVocabularyId());
        attributes.put("period", getPeriod());
        attributes.put("clamavServerIP", getClamavServerIP());
        attributes.put("clamavPort", getClamavPort());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long taskId = (Long) attributes.get("taskId");

        if (taskId != null) {
            setTaskId(taskId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        Long mailboxId = (Long) attributes.get("mailboxId");

        if (mailboxId != null) {
            setMailboxId(mailboxId);
        }

        Long permissionUserGroupId = (Long) attributes.get(
                "permissionUserGroupId");

        if (permissionUserGroupId != null) {
            setPermissionUserGroupId(permissionUserGroupId);
        }

        Long eventCalendarId = (Long) attributes.get("eventCalendarId");

        if (eventCalendarId != null) {
            setEventCalendarId(eventCalendarId);
        }

        Long documentFolderId = (Long) attributes.get("documentFolderId");

        if (documentFolderId != null) {
            setDocumentFolderId(documentFolderId);
        }

        Long webcontentFolderId = (Long) attributes.get("webcontentFolderId");

        if (webcontentFolderId != null) {
            setWebcontentFolderId(webcontentFolderId);
        }

        Long vocabularyId = (Long) attributes.get("vocabularyId");

        if (vocabularyId != null) {
            setVocabularyId(vocabularyId);
        }

        Long period = (Long) attributes.get("period");

        if (period != null) {
            setPeriod(period);
        }

        String clamavServerIP = (String) attributes.get("clamavServerIP");

        if (clamavServerIP != null) {
            setClamavServerIP(clamavServerIP);
        }

        Integer clamavPort = (Integer) attributes.get("clamavPort");

        if (clamavPort != null) {
            setClamavPort(clamavPort);
        }
    }

    @JSON
    @Override
    public long getTaskId() {
        return _taskId;
    }

    @Override
    public void setTaskId(long taskId) {
        _taskId = taskId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _columnBitmask |= STATUS_COLUMN_BITMASK;

        if (_originalStatus == null) {
            _originalStatus = _status;
        }

        _status = status;
    }

    public String getOriginalStatus() {
        return GetterUtil.getString(_originalStatus);
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public long getMailboxId() {
        return _mailboxId;
    }

    @Override
    public void setMailboxId(long mailboxId) {
        _columnBitmask |= MAILBOXID_COLUMN_BITMASK;

        if (!_setOriginalMailboxId) {
            _setOriginalMailboxId = true;

            _originalMailboxId = _mailboxId;
        }

        _mailboxId = mailboxId;
    }

    public long getOriginalMailboxId() {
        return _originalMailboxId;
    }

    @JSON
    @Override
    public long getPermissionUserGroupId() {
        return _permissionUserGroupId;
    }

    @Override
    public void setPermissionUserGroupId(long permissionUserGroupId) {
        _permissionUserGroupId = permissionUserGroupId;
    }

    @JSON
    @Override
    public long getEventCalendarId() {
        return _eventCalendarId;
    }

    @Override
    public void setEventCalendarId(long eventCalendarId) {
        _eventCalendarId = eventCalendarId;
    }

    @JSON
    @Override
    public long getDocumentFolderId() {
        return _documentFolderId;
    }

    @Override
    public void setDocumentFolderId(long documentFolderId) {
        _documentFolderId = documentFolderId;
    }

    @JSON
    @Override
    public long getWebcontentFolderId() {
        return _webcontentFolderId;
    }

    @Override
    public void setWebcontentFolderId(long webcontentFolderId) {
        _webcontentFolderId = webcontentFolderId;
    }

    @JSON
    @Override
    public long getVocabularyId() {
        return _vocabularyId;
    }

    @Override
    public void setVocabularyId(long vocabularyId) {
        _vocabularyId = vocabularyId;
    }

    @JSON
    @Override
    public long getPeriod() {
        return _period;
    }

    @Override
    public void setPeriod(long period) {
        _period = period;
    }

    @JSON
    @Override
    public String getClamavServerIP() {
        if (_clamavServerIP == null) {
            return StringPool.BLANK;
        } else {
            return _clamavServerIP;
        }
    }

    @Override
    public void setClamavServerIP(String clamavServerIP) {
        _clamavServerIP = clamavServerIP;
    }

    @JSON
    @Override
    public int getClamavPort() {
        return _clamavPort;
    }

    @Override
    public void setClamavPort(int clamavPort) {
        _clamavPort = clamavPort;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Task.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Task toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Task) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        TaskImpl taskImpl = new TaskImpl();

        taskImpl.setTaskId(getTaskId());
        taskImpl.setGroupId(getGroupId());
        taskImpl.setCompanyId(getCompanyId());
        taskImpl.setUserId(getUserId());
        taskImpl.setUserName(getUserName());
        taskImpl.setCreateDate(getCreateDate());
        taskImpl.setModifiedDate(getModifiedDate());
        taskImpl.setStatus(getStatus());
        taskImpl.setDescription(getDescription());
        taskImpl.setMailboxId(getMailboxId());
        taskImpl.setPermissionUserGroupId(getPermissionUserGroupId());
        taskImpl.setEventCalendarId(getEventCalendarId());
        taskImpl.setDocumentFolderId(getDocumentFolderId());
        taskImpl.setWebcontentFolderId(getWebcontentFolderId());
        taskImpl.setVocabularyId(getVocabularyId());
        taskImpl.setPeriod(getPeriod());
        taskImpl.setClamavServerIP(getClamavServerIP());
        taskImpl.setClamavPort(getClamavPort());

        taskImpl.resetOriginalValues();

        return taskImpl;
    }

    @Override
    public int compareTo(Task task) {
        long primaryKey = task.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Task)) {
            return false;
        }

        Task task = (Task) obj;

        long primaryKey = task.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        TaskModelImpl taskModelImpl = this;

        taskModelImpl._originalStatus = taskModelImpl._status;

        taskModelImpl._originalMailboxId = taskModelImpl._mailboxId;

        taskModelImpl._setOriginalMailboxId = false;

        taskModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Task> toCacheModel() {
        TaskCacheModel taskCacheModel = new TaskCacheModel();

        taskCacheModel.taskId = getTaskId();

        taskCacheModel.groupId = getGroupId();

        taskCacheModel.companyId = getCompanyId();

        taskCacheModel.userId = getUserId();

        taskCacheModel.userName = getUserName();

        String userName = taskCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            taskCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            taskCacheModel.createDate = createDate.getTime();
        } else {
            taskCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            taskCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            taskCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        taskCacheModel.status = getStatus();

        String status = taskCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            taskCacheModel.status = null;
        }

        taskCacheModel.description = getDescription();

        String description = taskCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            taskCacheModel.description = null;
        }

        taskCacheModel.mailboxId = getMailboxId();

        taskCacheModel.permissionUserGroupId = getPermissionUserGroupId();

        taskCacheModel.eventCalendarId = getEventCalendarId();

        taskCacheModel.documentFolderId = getDocumentFolderId();

        taskCacheModel.webcontentFolderId = getWebcontentFolderId();

        taskCacheModel.vocabularyId = getVocabularyId();

        taskCacheModel.period = getPeriod();

        taskCacheModel.clamavServerIP = getClamavServerIP();

        String clamavServerIP = taskCacheModel.clamavServerIP;

        if ((clamavServerIP != null) && (clamavServerIP.length() == 0)) {
            taskCacheModel.clamavServerIP = null;
        }

        taskCacheModel.clamavPort = getClamavPort();

        return taskCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(37);

        sb.append("{taskId=");
        sb.append(getTaskId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", mailboxId=");
        sb.append(getMailboxId());
        sb.append(", permissionUserGroupId=");
        sb.append(getPermissionUserGroupId());
        sb.append(", eventCalendarId=");
        sb.append(getEventCalendarId());
        sb.append(", documentFolderId=");
        sb.append(getDocumentFolderId());
        sb.append(", webcontentFolderId=");
        sb.append(getWebcontentFolderId());
        sb.append(", vocabularyId=");
        sb.append(getVocabularyId());
        sb.append(", period=");
        sb.append(getPeriod());
        sb.append(", clamavServerIP=");
        sb.append(getClamavServerIP());
        sb.append(", clamavPort=");
        sb.append(getClamavPort());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(58);

        sb.append("<model><model-name>");
        sb.append("at.mailbox.sync.model.Task");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>taskId</column-name><column-value><![CDATA[");
        sb.append(getTaskId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mailboxId</column-name><column-value><![CDATA[");
        sb.append(getMailboxId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>permissionUserGroupId</column-name><column-value><![CDATA[");
        sb.append(getPermissionUserGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>eventCalendarId</column-name><column-value><![CDATA[");
        sb.append(getEventCalendarId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>documentFolderId</column-name><column-value><![CDATA[");
        sb.append(getDocumentFolderId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>webcontentFolderId</column-name><column-value><![CDATA[");
        sb.append(getWebcontentFolderId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>vocabularyId</column-name><column-value><![CDATA[");
        sb.append(getVocabularyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>period</column-name><column-value><![CDATA[");
        sb.append(getPeriod());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>clamavServerIP</column-name><column-value><![CDATA[");
        sb.append(getClamavServerIP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>clamavPort</column-name><column-value><![CDATA[");
        sb.append(getClamavPort());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
